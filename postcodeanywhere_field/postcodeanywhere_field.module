<?php

/**
 * @file
 * Defines simple postcode types.
 */

/**
 * Implements hook_field_widget_form_alter().
 */
function postcodeanywhere_field_field_widget_form_alter(&$element, &$form_state, $context) {
  if ($context['field']['type'] == 'postcodeanywhere') {
    // ...
  }
}

/**
 * Implements hook_help().
 */
function postcodeanywhere_field_help($path, $arg) {
  switch ($path) {
    case 'admin/help#postcodeanywhere_field':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t("The PostcodeAnywhere Field module defines postcode field type for the Field module. A postcode may contain plain text only, or optionally, may use Drupal's <a href='@filter-help'>text filters</a> to securely manage HTML output. It defines a single line postcode field (textfield). See the <a href='@field-help'>Field module help page</a> for more information about fields.", array('@field-help' => url('admin/help/field'), '@filter-help' => url('admin/help/filter'))) . '</p>';
      return $output;
  }
}

/**
 * Implements hook_theme().
 */
function postcodeanywhere_field_theme($existing, $type, $theme, $path) {
  return array(
    'postcodeanywhere_text' => array(
      'render element' => 'element',
      'file' => 'postcodeanywhere_field.theme.inc',
    ),
    'postcodeanywhere_autocomplete' => array(
      'render element' => 'element',
      'file' => 'postcodeanywhere_field.theme.inc',
    ),
  );
}

/**
 * Implements hook_element_info().
 */
function postcodeanywhere_field_element_info() {

  $types['postcodeanywhere_text'] = array(
    '#input' => TRUE,
    '#size' => 60,
    '#maxlength' => 128,
    '#process' => array('postcodeanywhere_field_process_form'),
    '#theme' => array('postcodeanywhere_text'),
    '#theme_wrappers' => array('form_element'),
    '#autocomplete_path' => FALSE,
  );

  $types['postcodeanywhere_autocomplete'] = array(
    '#input' => TRUE,
    '#size' => 60,
    '#maxlength' => 128,
    '#process' => array('postcodeanywhere_field_process_form', 'ajax_process_form'),
    '#theme' => array('postcodeanywhere_autocomplete'),
    '#theme_wrappers' => array('form_element'),
    '#autocomplete_path' => 'pca/autocomplete',
  );

  return $types;
}

/**
 * Determines the value for a postcodeanywhere form element.
 *
 * @param $element
 *   The form element whose value is being populated.
 * @param $input
 *   The incoming input to populate the form element. If this is FALSE,
 *   the element's default value should be returned.
 *
 * @return
 *   The data that will appear in the $element_state['values'] collection
 *   for this element. Return nothing to use the default.
 */
function form_type_postcodeanywhere_value($element, $input = FALSE) {
  if ($input !== FALSE && $input !== NULL) {
    // Equate $input to the form value to ensure it's marked for
    // validation.
    return str_replace(array("\r", "\n"), '', $input);
  }
}

/**
 * Implements hook_field_info().
 *
 * Field settings:
 *   - max_length: the maximum length for a varchar field.
 * Instance settings:
 *   - text_processing: whether text input filters should be used.
 */
function postcodeanywhere_field_field_info() {
  return array(
    'postcodeanywhere' => array(
      'label' => t('Postcode Anywhere'),
      'description' => t('This field stores varchar text in the database used for PCA Predict service.'),
      'settings' => array('max_length' => 255),
      'instance_settings' => array('text_processing' => 0),
      'default_widget' => 'postcodeanywhere_text',
      'default_formatter' => 'text_default',
    ),
  );
}

/**
 * Implements hook_field_settings_form().
 */
function postcodeanywhere_field_field_settings_form($field, $instance, $has_data) {
  $settings = $field['settings'];

  $form = array();

  if ($field['type'] == 'postcodeanywhere') {
    $form['max_length'] = array(
      '#type' => 'textfield',
      '#title' => t('Maximum length'),
      '#default_value' => $settings['max_length'],
      '#required' => TRUE,
      '#description' => t('The maximum length of the field in characters.'),
      '#element_validate' => array('element_validate_integer_positive'),
      // @todo: If $has_data, add a validate handler that only allows
      // max_length to increase.
      '#disabled' => $has_data,
    );
  }

  return $form;
}

/**
 * Implements hook_field_instance_settings_form().
 */
function postcodeanywhere_field_field_instance_settings_form($field, $instance) {
  $settings = $instance['settings'];

  $form['text_processing'] = array(
    '#type' => 'radios',
    '#title' => t('Text processing'),
    '#default_value' => $settings['text_processing'],
    '#options' => array(
      t('Plain text'),
      t('Filtered text (user selects text format)'),
    ),
  );

  return $form;
}

/**
 * Implements hook_field_validate().
 *
 * Possible error codes:
 * - 'text_value_max_length': The value exceeds the maximum length.
 */
function postcodeanywhere_field_field_validate($entity_type, $entity, $field, $instance, $langcode, $items, &$errors) {
  foreach ($items as $delta => $item) {
    foreach (array('value') as $column) {
      if (!empty($item[$column])) {
        if (!empty($field['settings']['max_length']) && drupal_strlen($item[$column]) > $field['settings']['max_length']) {
          switch ($column) {
            case 'value':
              $message = t('%name: the text may not be longer than %max characters.', array('%name' => $instance['label'], '%max' => $field['settings']['max_length']));
              $errors[$field['field_name']][$langcode][$delta][] = array(
                'error' => "text_{$column}_length",
                'message' => $message,
              );
              break;
          }
        }
      }
    }
  }
}

/**
 * Implements hook_field_load().
 *
 * Where possible, generate the sanitized version of each field early so that
 * it is cached in the field cache. This avoids looking up from the filter cache
 * separately.
 *
 * @see text_field_formatter_view()
 */
function postcodeanywhere_field_field_load($entity_type, $entities, $field, $instances, $langcode, &$items) {
  foreach ($entities as $id => $entity) {
    foreach ($items[$id] as $delta => $item) {
      // Only process items with a cacheable format, the rest will be handled
      // by formatters if needed.
      if (empty($instances[$id]['settings']['text_processing']) || filter_format_allowcache($item['format'])) {
        $items[$id][$delta]['safe_value'] = isset($item['value']) ? _postcodeanywhere_text_sanitize($instances[$id], $langcode, $item, 'value') : '';
      }
    }
  }
}

/**
 * Implements hook_field_is_empty().
 */
function postcodeanywhere_field_field_is_empty($item, $field) {
  if (!isset($item['value']) || $item['value'] === '') {
    return TRUE;
  }
  return FALSE;
}

/**
 * Implements hook_field_formatter_view().
 */
/*
function postcodeanywhere_field_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();

  switch ($display['type']) {
    case 'text_default':
      foreach ($items as $delta => $item) {
        $output = _postcodeanywhere_text_sanitize($instance, $langcode, $item, 'value');
        $element[$delta] = array('#markup' => $output);
      }
      break;

    case 'text_plain':
      foreach ($items as $delta => $item) {
        $element[$delta] = array('#markup' => strip_tags($item['value']));
      }
      break;
  }

  return $element;
}
*/

/**
 * Sanitizes the 'value' data of a text value.
 *
 * Depending on whether the field instance uses text processing, data is run
 * through check_plain() or check_markup().
 *
 * @param $instance
 *   The instance definition.
 * @param $langcode
 *   The language associated to $item.
 * @param $item
 *   The field value to sanitize.
 * @param $column
 *   The column to sanitize ('value').
 *
 * @return
 *  The sanitized string.
 */
function _postcodeanywhere_text_sanitize($instance, $langcode, $item, $column) {
  // If the value uses a cacheable text format, text_field_load() precomputes
  // the sanitized string.
  if (isset($item["safe_$column"])) {
    return $item["safe_$column"];
  }
  return $instance['settings']['text_processing'] ? check_markup($item[$column], $item['format'], $langcode) : check_plain($item[$column]);
}

/**
 * Implements hook_field_widget_info().
 */
function postcodeanywhere_field_field_widget_info() {
  return array(
    'postcodeanywhere_text' => array(
      'label' => t('PCA (text field)'),
      'field types' => array('text'),
      'settings' => array(
        'size' => 60,
      ),
      'behaviors' => array(
        'multiple values' => FIELD_BEHAVIOR_DEFAULT,
        'default value' => FIELD_BEHAVIOR_DEFAULT,
      ),
    ),
    'postcodeanywhere_autocomplete' => array(
      'label' => t('PCA (autocomplete)'),
      'field types' => array('text'),
      'settings' => array(
        'size' => 60,
      ),
      'behaviors' => array(
        'multiple values' => FIELD_BEHAVIOR_DEFAULT,
        'default value' => FIELD_BEHAVIOR_DEFAULT,
      ),
    ),
  );
}

/**
 * Implements hook_field_widget_settings_form().
 */
function postcodeanywhere_field_field_widget_settings_form($field, $instance) {
  $widget = $instance['widget'];
  $settings = $widget['settings'];

  if ($widget['type'] == 'postcodeanywhere_text' || $widget['type'] == 'postcodeanywhere_autocomplete') {
    $form['size'] = array(
      '#type' => 'textfield',
      '#title' => t('Size of textfield'),
      '#default_value' => $settings['size'],
      '#required' => TRUE,
      '#element_validate' => array('element_validate_integer_positive'),
    );
  }
  else {
    $form['rows'] = array(
      '#type' => 'textfield',
      '#title' => t('Rows'),
      '#default_value' => $settings['rows'],
      '#required' => TRUE,
      '#element_validate' => array('element_validate_integer_positive'),
    );
  }

  return $form;
}

/**
 * Implements hook_field_widget_form().
 */
function postcodeanywhere_field_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {

  $summary_widget = array();
  $main_widget = array();

  switch ($instance['widget']['type']) {
    case 'postcodeanywhere_text':
      $main_widget = $element + array(
        '#type' => 'textfield',
        '#default_value' => isset($items[$delta]['value']) ? $items[$delta]['value'] : NULL,
        '#size' => $instance['widget']['settings']['size'],
        '#maxlength' => $field['settings']['max_length'],
        '#attributes' => array('class' => array('text-full')),
        '#process' => array('postcodeanywhere_field_process_form'),
        '#theme' => array('postcodeanywhere_text'),
        '#theme_wrappers' => array('form_element'),
        '#autocomplete_path' => FALSE,
      );
      break;

    case 'postcodeanywhere_autocomplete':
      $main_widget = $element + array(
        '#type' => 'textfield',
        '#default_value' => isset($items[$delta]['value']) ? $items[$delta]['value'] : NULL,
        '#size' => $instance['widget']['settings']['size'],
        '#maxlength' => $field['settings']['max_length'],
        '#attributes' => array('class' => array('text-autocomplete')),
        '#process' => array('postcodeanywhere_field_process_form', 'ajax_process_form'),
        '#theme' => array('postcodeanywhere_autocomplete'),
        '#theme_wrappers' => array('form_element'),
        '#autocomplete_path' => 'pca/autocomplete',
        '#element_validate' => array('postcodeanywhere_autocomplete_validate'),
      );
      break;
  }

  if ($main_widget) {
    // Conditionally alter the form element's type if text processing is enabled.
    if ($instance['settings']['text_processing']) {
      $element = $main_widget;
      $element['#type'] = 'text_format';
      $element['#format'] = isset($items[$delta]['format']) ? $items[$delta]['format'] : NULL;
      $element['#base_type'] = $main_widget['#type'];
    }
    else {
      $element['value'] = $main_widget;
    }
  }
  if ($summary_widget) {
    $element['summary'] = $summary_widget;
  }

  return $element;
}

/**
 * Implements hook_field_widget_error().
 */
function postcodeanywhere_field_field_widget_error($element, $error, $form, &$form_state) {
  switch ($error['error']) {
    case 'value':
      $error_element = $element['value'];
      break;

    default:
      $error_element = $element[$element['#columns'][0]];
      break;
  }

  form_error($error_element, $error['message']);
}

/**
 * Implements hook_filter_format_update().
 */
function postcodeanywhere_field_filter_format_update($format) {
  field_cache_clear();
}

/**
 * Implements hook_filter_format_disable().
 */
function postcodeanywhere_field_filter_format_disable($format) {
  field_cache_clear();
}

/**
 * Form element processing handler for postcodeanywhere field.
 *
 * @param $element
 *   An associative array containing the properties of the element.
 *
 * @return
 *   The processed element.
 */
function postcodeanywhere_field_process_form($element, &$form_state) {

  if (!empty($element['#type'])) {
    switch ($element['#type']) {
      case 'postcodeanywhere_text':
          $id = $element['#id'];
          $name = $element['#name'];
          $settings = array(
            'id_wrapper' => ".form-item-" . $name,
            'id_postcode' => "input[id*='$id']",
            'id_lookup_button' => "input[id='postcodeanywhere-lookup-button']",
          );
          postcodeanywhere_form_add_js($settings);
        break;
      case 'postcodeanywhere_autocomplete':
          $id = $element['#id'];
          $name = $element['#name'];
          $settings = array(
            'id_wrapper' => ".form-item-" . $name,
            'id_postcode' => "input[id*='$id']",
          );
          $element['#autocomplete_path'] = 'pca/autocomplete';
          postcodeanywhere_form_add_js($settings);
        break;
    }
  }

  return $element;
}
